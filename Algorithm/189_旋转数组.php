<?php

/**
 * 题目
 *     给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。
 * 示例 1:
 *     输入: [1,2,3,4,5,6,7] 和 k = 3
 *     输出: [5,6,7,1,2,3,4]
 * 解释:
 *     向右旋转 1 步: [7,1,2,3,4,5,6]
 *     向右旋转 2 步: [6,7,1,2,3,4,5]
 *     向右旋转 3 步: [5,6,7,1,2,3,4]
 * 示例 2:
 *     输入: [-1,-100,3,99] 和 k = 2
 *     输出: [3,99,-1,-100]
 * 解释:
 *     向右旋转 1 步: [99,-1,-100,3]
 *     向右旋转 2 步: [3,99,-1,-100]
 * 说明:
 *     尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。
 *     要求使用空间复杂度为 O(1) 的原地算法
 */
class Solution
{
    /**
     * 思路
     *     维护一个队列，每次旋转时候，队尾出队列，并入队列
     *     循环次数直到退出
     * 耗时
     *     执行用时 : 2796 ms, 在Rotate Array的PHP提交中击败了18.92% 的用户
     *     内存消耗 : 16.1 MB, 在Rotate Array的PHP提交中击败了100.00% 的用户
     */
    function rotate(&$nums, $k)
    {
        while ($k) {
            $task = array_pop($nums);    // 出队列
            array_unshift($nums, $task); // 入队列
            $k--;
        }
    }
}