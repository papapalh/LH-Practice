<?php
/**
 * 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
 *     字符          数值
 *     I             1
 *     V             5
 *     X             10
 *     L             50
 *     C             100
 *     D             500
 *     M             1000
 * 例如
 *     2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。
 *     27 写做  XXVII, 即为 XX + V + II 。
 * 示例 1:
 *     输入: 3
 *     输出: "III"
 * 示例 2:
 *     输入: 4
 *     输出: "IV"
 * 示例 3:
 *     输入: 9
 *     输出: "IX"
 * 示例 4:
 *     输入: 58
 *     输出: "LVIII"
 *     解释: L = 50, V = 5, III = 3.
 * 示例 5:
 *     输入: 1994
 *     输出: "MCMXCIV"
 *     解释: M = 1000, CM = 900, XC = 90, IV = 4.
 */

/**
 * 思路（大神贪心算法）
 *     特别注意：本文介绍的是“贪心算法”，但这种贪心选择性质的成立是有一定条件的。跟这里的“候选”数值有关，如果“候选”数值是另一些数字，“贪心算法”很可能就失效了，此时可能就要应用“动态规划”来解决。这一点在本文并不展开，本人也要进行相应的学习以后，才能解释清楚这个问题。也希望能解释清楚这件事情的朋友能够把您的理解分享给大家。
 * 在生活中的例子：
 *     在以前还使用现金购物的年代，如果我们不想让对方找钱，付款的时候我们会尽量拿面值大的纸币给对方，这样才会使得我们给对方的纸币张数最少，对方点钱的时候（因为对方要检验你给的钱对不对）也最方便。最极端的一种情况，你要是都拿零钱去买一个比较贵重的东西，我相信没有人是很高兴收到你的钱的，因为他们点钱费劲。
 *     “整数转罗马数字”与上面的问题是一模一样的思想：在表示一个较大整数的时候，“罗马数字”不会让你都用 11 加起来，肯定是写出来的“罗马数字”的个数越少越好。
 *     于这道问题，“纸币”有哪些，并不是只有题目中给出的对应关系，根据规则，还可以得到一些“纸币”的面值，不过都是有限个“纸币”，很快就能罗列出来。
 * 于是解这道题的思路就出来了：
 *     “纸币”有哪些？
 *     一个整数如何做“加法因子”的分解？
 * 思路分析：
 *     从题目中给出的“罗马数字”与阿拉伯数字的对应关系，和翻译规则，我们需要推导出“罗马数字”还有哪些组合。
 *     罗马数字	阿拉伯数字
 *     I	11
 *     V	55
 *     X	1010
 *     L	5050
 *     C	100100
 *     D	500500
 *     M	10001000
 * 为此，我们要举例子帮助我们发现规律：
 *     阿拉伯数字	转换规则	罗马数字
 *     1	直接看表	I
 *     2	2 = 1 + 12=1+1，相同数字简单叠加	II
 *     3	3 = 1 + 1 + 13=1+1+1，相同数字简单叠加	III
 *     4	不能写成 4 = 1 + 1 + 1 + 14=1+1+1+1，44 应该看做 4 = 5 - 14=5−1	IV
 *     5	直接看表	V
 *     6 = 5 + 16=5+1，大数字在前，小数字在后	VI
 *     7 = 5 + 1 + 17=5+1+1，大数字在前，小数字在后，相同数字简单叠加	VII
 *     8	8 = 5 + 1 + 1 + 18=5+1+1+1，大数字在前，小数字在后，相同数字简单叠加	VIII
 *     9	不能写成 9 = 5 + 1 + 1 + 1 + 19=5+1+1+1+1，99 应该看做 9 = 10 - 19=10−1	IX
 *     10	直接看表	X
 *     于是，我们发现（其实在题目中已经强调了这些特例），出现 44、99、4040、9090、400400、900900 （40004000、90009000 不讨论了，题目测试用例中有说，不会超过 39993999）的情况比较特殊一些，做的是减法，把它们也加入到“罗马数字”与阿拉伯数字的对应关系表中，并且按照从大到小的顺序排列。
 * 于是，“将整数转换为阿拉伯数字”的过程，就是我们用上面这张表中右边的数字作为“加法因子”去分解一个整数，并且分解的整数个数越少越好，即尽量使用靠前的数字，这可以认为是一种贪心法则。
 * 耗时
 *     执行用时 :24 ms, 在所有 PHP 提交中击败了53.01%的用户
 *     内存消耗 :14.7 MB, 在所有 PHP 提交中击败了41.51%的用户
 */
class Solution
{
    function intToRoman($num)
    {
        $nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
        $romans = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];

        $res = '';

        for ($i = 0; $i < 13; $i++) {

            while ($num >= $nums[$i]) {
                $res .= $romans[$i];
                $num -= $nums[$i];
            }

        }

        return $res;
    }
}

$s = new Solution();
echo $s->intToRoman(3);