package main

import "fmt"

func main() {
	fmt.Println(isPowerOfTwo(2))
}

/**
 * 思路(类似反补码)
 *    如果n是2的幂，则一定满足以下条件：
 *      恒有 n & (n - 1) == 0，这是因为：
 *      	n 二进制最高位为 1，其余所有位为 00；
 *          (n - 1)二进制最高位为 00，其余所有位为 11；
 *     一定满足 n > 0。
 *     因此，通过 n > 0 且 n & (n - 1) == 0 即可判定是否满足
 *        n	      n - 1	    n & (n - 1)
 *  2(0)  0001    0001	    (0001) & (0000) == 0
 *  2(1)  0010    0010	    (0010) & (0001) == 0
 *  2(2)  0100    0100      (0100) & (0011) == 0
 *  2(3)  1000    1000		(1000) & (0111) == 0
 *  .......
 * 耗时
 *    执行用时：0 ms, 在所有 Go 提交中击败了100.00%的用户
 *    内存消耗：2.2 MB, 在所有 Go 提交中击败了8.03%的用户
 */
func isPowerOfTwo(n int) bool {
	return n > 0 && (n-1)&n == 0
}
