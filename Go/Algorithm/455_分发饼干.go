package main

import (
	"fmt"
	"sort"
)

// 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
// 对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。
// 示例 1:
// 		输入: g = [1,2,3], s = [1,1]
// 		输出: 1
// 解释:
// 		你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
// 		虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
// 		所以你应该输出1。
// 示例 2:
// 		输入: g = [1,2], s = [1,2,3]
// 		输出: 2
// 解释:
// 		你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
// 		你拥有的饼干数量和尺寸都足以让所有孩子满足。
// 		所以你应该输出2.

func main() {
	fmt.Println(findContentChildren([]int{1, 2}, []int{1, 2, 3}))
}

// 思路
// 		排序+贪心算法
// 		贪心算法: 心算法顾名思义，能贪就贪。题目的意思是所有人得到的饼干最少化。(用最少的资源匹配)
// 		想将孩子和饼干排序, 小饼干给胃口最小的，大饼干给胃口最大的
// 耗时
// 		执行用时：44 ms, 在所有 Go 提交中击败了16.38%的用户
// 		内存消耗：6.2 MB, 在所有 Go 提交中击败了63.39%的用户
func findContentChildren(g []int, s []int) int {
	sort.Ints(g)
	sort.Ints(s)

	n := 0

	for _, biscuit := range s {
		if len(g) == 0 {
			break
		}

		if biscuit >= g[0] {
			n++
			g = g[1:]
		}
	}

	return n
}
