package main

import "fmt"

func main() {
    num := 19
    fmt.Print(isHappy(num))
}

/*
 * 题目
 *    编写一个算法来判断一个数是不是“快乐数”。
 *    一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。
 * 示例: 
 *    输入: 19
 *    输出: true
 * 解释: 
 *    1*1 + 9*9 = 82
 *    8*8 + 2*2 = 68
 *    6*6 + 8*8 = 100
 *    1*1 + 0*0 + 0*0 = 1 
 */

/*
 * 思路
 *    循环处理数字各位之合，如果发现为1，则退出
 *    如果一直不为1，则陷入死循环，使用hash表额外记录数据，发现重复即为false
 * 耗时: 
 *    执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户
 *    内存消耗 :2.1 MB, 在所有 Go 提交中击败了50.59%的用户
 */

func isHappy(n int) bool {

    m := map[int]bool{}

    for n != 1 {

        num := 0

        for n >= 1 {
            a := n % 10
            num += a * a
            n = (n - a) / 10
        }

        n = num

        if  m[n] == true {
            return false
        }

        m[n] = true
    }

    return true
}