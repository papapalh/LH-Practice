package main

import "fmt"

/*
 * 通用
 *    %v	值的默认格式表示
 *    %+v	类似%v，但输出结构体时会添加字段名
 *    %#v	值的Go语法表示
 *    %T	值的类型的Go语法表示
 *    %%	百分号
 * 布尔值
 *    %t	单词true或false
 * 整数
 *    %b	表示为二进制
 *    %c	该值对应的unicode码值
 *    %d	表示为十进制
 *    %o	表示为八进制
 *    %q	该值对应的单引号括起来的go语法字符字面值，必要时会采用安全的转义表示
 *    %x	表示为十六进制，使用a-f
 *    %X	表示为十六进制，使用A-F
 *    %U	表示为Unicode格式：U+1234，等价于"U+%04X"
 * 浮点数与复数的两个组分：
 *    %b	无小数部分、二进制指数的科学计数法，如-123456p-78；参见strconv.FormatFloat
 *    %e	科学计数法，如-1234.456e+78
 *    %E	科学计数法，如-1234.456E+78
 *    %f	有小数部分但无指数部分，如123.456
 *    %F	等价于%f
 *    %g	根据实际情况采用%e或%f格式（以获得更简洁、准确的输出）
 *    %G	根据实际情况采用%E或%F格式（以获得更简洁、准确的输出）
 * 字符串和[]byte：
 *    %s	直接输出字符串或者[]byte
 *    %q	该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示
 *    %x	每个字节用两字符十六进制数表示（使用a-f）
 *    %X	每个字节用两字符十六进制数表示（使用A-F）
 * 指针
 *    %p	表示为十六进制，并加上前导的0x
*/
func main() {
	fmt.Print("    Printf(format,a...):  格式化format字符串并标准输出,返回字节数和错误。")
	a, _ := fmt.Printf(" 格式化 %t", true)
	fmt.Println("  字节:" ,a)

	fmt.Print("    Sprintf(format,a...): 格式化format字符串,返回字符串。")
	b := fmt.Sprintf("格式化 %t", true)
	fmt.Println(b)

	fmt.Print("    Print(a...):          格式化(默认格式)字符串并标准输出,两个相邻的都不是字符串，则在它们的之间添加空格")
	c, _ := fmt.Print(" ", true, true)
	fmt.Println("  字节:" , c)

	fmt.Print("    Sprint(a...):         格式化(默认格式)字符串并标准输出，串联输出生成并返回一个字符串。两个相邻的都不是字符串，则在它们的之间添加空格")
	d := fmt.Sprint(" ", 2, 1)
	fmt.Println(d)

	fmt.Print("    Println(a...):        格式化(默认格式)字符串并标准输出, 在相邻参数的输出之间添加空格，输出结束后添加换行符,返回写入的字节数和遇到的任何错误。")
	e, _ := fmt.Print(" ", 1,"X")
	fmt.Println("  字节:" , e)

	fmt.Print("    Sprintln(a...):       格式化(默认格式)字符串并标准输出,串联输出生成并返回一个字符串, 在相邻参数的输出之间添加空格，输出结束后添加换行符")
	f := fmt.Sprintln(" ", 1, "X")
	fmt.Println(f)
}
